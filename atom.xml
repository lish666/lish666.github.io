<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子的博客</title>
  
  <subtitle>欲买桂花同载酒 终不似少年游</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-13T10:05:20.214Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>lish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/06/13/HTML5%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/06/13/HTML5%E6%80%BB%E7%BB%93/</id>
    <published>2024-06-13T10:05:05.716Z</published>
    <updated>2024-06-13T10:05:20.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在了解HTML5之前，我们先来了解一下什么是HTML和HTML5</p><blockquote><p>HTML的全称为超文本标记语言(Hyper Text Markup Language)，是一种标记语言。它包括一系列标签，HTML标签可以说明文字，图形、动画、声音、表格、链接等，通过这些标签编写成一个让浏览器能识别的.html文件。它的版本发展历程为HTML 1.0  &gt;  HTML 2.0  &gt;  HTML 3.2  &gt;  HTML 4.0  &gt;  HTML 4.01</p></blockquote><blockquote><p>HTML5是由W3C(万维网联盟)在2007年成立的，旨在满足互联网应用迅速发展的需求，提供一个统一的、开放的网页标准，代表了网页标记语言的新标准，也标志着网页应用开发进入了一个新的时代，拥有比HTML更丰富的特性的同时，也废弃了一些标签特性。</p></blockquote><p>##HTML5的特性有那些？</p><ol><li>新增加了一些语义标签</li><li>增强型表单</li><li>视频和音频</li><li>Canvas绘图</li><li>SVG绘图</li><li>地理定位</li><li>拖拽API</li><li>WebWorker</li><li>WebStorage</li><li>WebSocket</li><li>移除部分标签</li></ol><h3 id="语义标签"><a href="#语义标签" class="headerlink" title="语义标签"></a>语义标签</h3><p>这些新的语义元素有助于更准确地描述文档的结构，提高文档的可读性和可访问性。使用这些元素有助于浏览器、搜索引擎和辅助技术更好地理解和解释页面内容，更有利于SEO优化，方便爬虫爬取网页，增加曝光度。</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>article</td><td>定义页面独立的内容区域</td></tr><tr><td>aside</td><td>定义页面的侧边栏内容</td></tr><tr><td>bdi</td><td>允许您设置一段文本，使其脱离其父元素的文本方向设置</td></tr><tr><td>details</td><td>用于描述文档或文档某个部分的细节</td></tr><tr><td>dialog</td><td>定义对话框，比如提示框</td></tr><tr><td>summary</td><td>标签包含details元素的标题</td></tr><tr><td>figure</td><td>规定独立的流内容（图像、图表、照片、代码等等）</td></tr><tr><td>figcaption</td><td>定义figure元素的标题</td></tr><tr><td>header</td><td>定义了文档的头部区域</td></tr><tr><td>footer</td><td>定义section或document的页脚</td></tr><tr><td>mark</td><td>定义带有记号的文本(实际是高亮文本内容)</td></tr><tr><td>meter</td><td>定义度量衡。仅用于已知最大和最小值的度量</td></tr><tr><td>nav</td><td>定义导航链接的部分</td></tr><tr><td>progress</td><td>定义任何类型的任务的进度</td></tr><tr><td>ruby</td><td>定义ruby注释（中文注音或字符）</td></tr><tr><td>rt</td><td>定义字符（中文注音或字符）的解释或发音</td></tr><tr><td>rp</td><td>在ruby注释中使用，定义不支持ruby元素的浏览器所显示的内容</td></tr><tr><td>section</td><td>定义文档中的节（section、区段）</td></tr><tr><td>time</td><td>定义日期或时间</td></tr><tr><td>wbr</td><td>规定在文本中的何处适合添加换行符</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于表示页面中独立的、完整的、可以独立分配的内容。通常用于文章、博客帖子等--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文章内容...<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于表示与页面内容相关的辅助信息。通常包含侧边栏、广告、引用等--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这里是侧边栏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>相关链接...<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于设置大一号文字(最大7号)，并且可以设置文字方向(感觉这个没啥用)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>外面小一号文字<span class="tag">&lt;<span class="name">big</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>这是大一号的文本111。<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于展示详情内容，和tree树结构类似--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>显示的标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 折叠隐藏的内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>折叠隐藏的内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在页面中间展示一个窗口结构--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dialog</span> <span class="attr">open</span>&gt;</span> 窗口内容<span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在页面中规定独立的流内容（图像、图表、照片、代码等等）展示区域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;xxx.img&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>这是一张图片<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--header规定页面的头部，footer规定页面的底部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mark内容会高亮--&gt;</span></span><br><span class="line">今天要<span class="tag">&lt;<span class="name">mark</span>&gt;</span>吃鸡腿<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--类似一个进度条，展示设置的百分比值或者指定的max和value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">value</span>=<span class="string">&quot;0.6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line">用于包含导航链接的部分，通常包含页面的主导航</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--进度条，一般可以设置下载进度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--很方便的功能，标注，下面有运行效果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">  汉 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>Han<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">  字 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>Zi<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如下是运行结果--&gt;</span></span><br><span class="line">Han  Zi</span><br><span class="line">汉   字</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义了一个区域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>这是一个区域<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--time标签不会在任何浏览器中呈现任何特殊效果，只是用来给机器识别的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--该元素能够以机器可读的方式对日期和时间进行编码，这样，举例说，用户代理能够把生日提醒或排定的事件添加到用户日程表中，搜索引擎也能够生成更智能的搜索结果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我今年的生日要<span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2024-06-01&quot;</span>&gt;</span>吃蛋糕<span class="tag">&lt;/<span class="name">time</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&lt;!-与<span class="tag">&lt;<span class="name">br</span>&gt;</span>标签不同，如果浏览器窗口的宽度足够，则不换行；反之，则在添加了 <span class="tag">&lt;<span class="name">wbr</span>&gt;</span> 标签的位置进行换行--&gt;</span><br><span class="line">我要吃<span class="tag">&lt;<span class="name">wbr</span>&gt;</span>麦当当<span class="tag">&lt;/<span class="name">wbr</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ps:各个浏览器对语义标签的支持情况不一样，使用的时候建议去查阅一下对应的支持情况</code></p><h3 id="增强型表单"><a href="#增强型表单" class="headerlink" title="增强型表单"></a>增强型表单</h3><p>HTML5 拥有多个新的表单 Input 输入类型。这些新特性提供了更好的输入控制和验证</p><table><thead><tr><th>type</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>主要用于选取颜色</td></tr><tr><td>date</td><td>选取日期</td></tr><tr><td>datetime</td><td>选取日期(UTC时间)</td></tr><tr><td>datetime-local</td><td>选取日期（无时区）</td></tr><tr><td>month</td><td>选择一个月份</td></tr><tr><td>week</td><td>选择周和年</td></tr><tr><td>time</td><td>选择一个时间</td></tr><tr><td>email</td><td>包含e-mail地址的输入域</td></tr><tr><td>number</td><td>数值的输入域</td></tr><tr><td>url</td><td>url地址的输入域</td></tr><tr><td>tel</td><td>定义输入电话号码和字段</td></tr><tr><td>search</td><td>用于搜索域</td></tr><tr><td>range</td><td>一个范围内数字值的输入域</td></tr></tbody></table><p>HTML5 新增以下表单元素</p><table><thead><tr><th>表单元素</th><th>描述</th></tr></thead><tbody><tr><td>datalist</td><td>元素规定输入域的选项列表使用 input 元素的 list 属性与 datalist 元素的 id 绑定</td></tr><tr><td>keygen</td><td>提供一种验证用户的可靠方法标签规定用于表单的密钥对生成器字段。</td></tr><tr><td>output</td><td>用于不同类型的输出比如计算或脚本输出</td></tr></tbody></table><p>HTML5 新增的表单属性</p><table><thead><tr><th>表单属性</th><th>描述</th></tr></thead><tbody><tr><td>placehoder</td><td>输入框默认提示文字</td></tr><tr><td>required</td><td>要求输入的内容是否可为空</td></tr><tr><td>pattern</td><td>描述一个正则表达式验证输入的值</td></tr><tr><td>min</td><td>设置元素最小值</td></tr><tr><td>max</td><td>设置元素最大值</td></tr><tr><td>step</td><td>为输入域规定合法的数字间隔</td></tr><tr><td>heigh</td><td>用于image类型input标签图像高度</td></tr><tr><td>wdith</td><td>用于image类型input标签图像宽度</td></tr><tr><td>autofocus</td><td>规定在页面加载时，域自动获得焦点</td></tr><tr><td>multiple</td><td>规定input元素中可选择多个值</td></tr><tr><td>form</td><td>可以在form外部的input上面指向某个form，随着form一起提交，方便页面布局</td></tr><tr><td>formaction</td><td>用于描述表单提交的 URL 地址。会覆盖 form元素中的action属性</td></tr><tr><td>novalidate</td><td>布尔属性，在表单提交时无需被验证</td></tr><tr><td>autofocus</td><td>页面加载时自动聚焦到此表单控件</td></tr></tbody></table><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--video定义视频播放器的容器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--width 和 height：设置视频播放器的宽度和高度并且增加controls：向用户显示视频播放器的控制按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--source定义多个媒体资源，浏览器将选择支持的第一个资源进行播放--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type支持video/mp4, video/webm, 和 video/ogg--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;a.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;b.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--track字幕，可以定义多个--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--kind规定文本轨道的文本类型--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--srclang规定轨道文本数据的语言。如果 kind 属性值是 &quot;subtitles&quot;，则该属性是必需的--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--src文件资源，label规定文本轨道的标签和标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">&quot;a.vtt&quot;</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">label</span>=<span class="string">&quot;标题&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">&quot;b.vtt&quot;</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">label</span>=<span class="string">&quot;标题&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>视频文件类型各个浏览器支持情况</p><table><thead><tr><th>浏览器</th><th>MP4</th><th>WebM</th><th>Ogg</th></tr></thead><tbody><tr><td>Internet Explorer 9+</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Chrome 6+</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Firefox 3.6+</td><td>NO</td><td>YES</td><td>YES</td></tr><tr><td>Safari 5+</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Opera 10.6+</td><td>NO</td><td>YES</td><td>YES</td></tr></tbody></table><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---   autoplay指定音频或视频在页面加载时自动播放--&gt;</span></span><br><span class="line"><span class="comment">&lt;!---   loop指定音频或视频在播放结束后是否循环播放--&gt;</span></span><br><span class="line"><span class="comment">&lt;!---   preload指定是否在页面加载时预加载音频或视频，可设置为 &quot;auto&quot;、&quot;metadata&quot; 或 &quot;none&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/wav&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ps:音频和视频都有autoplay、loop、preload属性</code></p><p>音频文件类型各个浏览器支持情况</p><table><thead><tr><th>浏览器</th><th>MP3</th><th>Wav</th><th>Ogg</th></tr></thead><tbody><tr><td>Internet Explorer</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Chrome</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Firefox</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Safari</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>Opera</td><td>YES</td><td>YES</td><td>YES</td></tr></tbody></table><h3 id="Canvas绘图"><a href="#Canvas绘图" class="headerlink" title="Canvas绘图"></a>Canvas绘图</h3><p>一般用于组合图片，或者在图片上绘制文字，生成二维码，绘制动画效果等，下面是一个简单的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--定义一个空白的画布--&gt;</span><br><span class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot; style=&quot;border:1px solid red;&quot;&gt;</span><br><span class="line">&lt;/canvas&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 获取Canvas元素的上下文</span><br><span class="line">    const canvas = document.getElementById(&#x27;myCanvas&#x27;);//通过id获取canvas对象</span><br><span class="line">    const ctx = canvas.getContext(&#x27;2d&#x27;);//获取2D上下文，用于进行绘图操作</span><br><span class="line">    // 绘制矩形</span><br><span class="line">    ctx.fillStyle = &#x27;green&#x27;;//设置填充颜色</span><br><span class="line">    ctx.fillRect(10, 10, 150, 80);//fillRect(x, y, width, height)绘制填充的矩形</span><br><span class="line">    // 绘制文本</span><br><span class="line">    ctx.fillStyle = &#x27;white&#x27;;//设置填充颜色</span><br><span class="line">    ctx.font = &#x27;20px Arial&#x27;;//设置字体样式</span><br><span class="line">    ctx.fillText(&#x27;我要吃烤鸭!&#x27;, 20, 50);//fillText(text, x, y)在画布上绘制填充文本</span><br><span class="line">    // 绘制路径（三角形）</span><br><span class="line">    ctx.beginPath();//创建一条路径</span><br><span class="line">    ctx.moveTo(10, 80);//moveTo(x, y)创建指定一个坐标</span><br><span class="line">    ctx.lineTo(85, 10);//lineTo(x，y)绘制一条从当前点到指定坐标的直线</span><br><span class="line">    ctx.lineTo(160, 80);</span><br><span class="line">    ctx.closePath();//闭合路径，连接起点和终点</span><br><span class="line">    ctx.stroke();//绘制路径的边框</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="SVG绘图"><a href="#SVG绘图" class="headerlink" title="SVG绘图"></a>SVG绘图</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;150&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;80&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;50&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:yellow;stroke:purple;stroke-width:2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：svgs是W3C推荐标准，优点有如下几个（可能不全），都是我印象中的，更多的svg内容可以参考<a href="https://www.w3cschool.cn/svg/svg-tutorial.html">svg教程</a>学习，我平时都是要求ui给出svg图片。 </p><blockquote><p>图像在放大或改变尺寸的情况下其图形质量不会有所损失</p><p>使用 XML 格式定义图形,内容更容易被搜索和识别。</p><p>相对png之类的可以更好的被压缩</p></blockquote><h3 id="地理定位Geolocation"><a href="#地理定位Geolocation" class="headerlink" title="地理定位Geolocation"></a>地理定位Geolocation</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//geolocation对象的3个方法</span><br><span class="line">//window.navigator.geolocation &#123; </span><br><span class="line">//    getCurrentPosition: fn //用于获取当前的位置数据 </span><br><span class="line">//    watchPosition: fn //监视用户位置的改变 </span><br><span class="line">//    clearWatch: fn //清除定位监视</span><br><span class="line">//&#125;　</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;点击按钮获取您当前坐标（可能需要比较长的时间获取）：&lt;/p&gt;</span><br><span class="line">&lt;button onclick=&quot;getLocation()&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x=document.getElementById(&quot;demo&quot;);</span><br><span class="line">function getLocation()&#123;</span><br><span class="line">  let success = (position)=&gt;&#123;</span><br><span class="line">       console.log(&#x27;定位时间：&#x27;,position.timestamp)</span><br><span class="line">　　　　console.log(&#x27;经度：&#x27;,position.coords.longitude)</span><br><span class="line">　　　　console.log(&#x27;纬度：&#x27;,position.coords.latitude)</span><br><span class="line">　　　　console.log(&#x27;海拔：&#x27;,position.coords.altitude)</span><br><span class="line">　　　　console.log(&#x27;速度：&#x27;,position.coords.speed)</span><br><span class="line">  &#125;</span><br><span class="line">  let error = (error)=&gt;&#123;</span><br><span class="line">      switch(error.code) &#123;</span><br><span class="line">        case error.PERMISSION_DENIED:</span><br><span class="line">          x.innerHTML=&quot;用户拒绝对获取地理位置的请求。&quot;</span><br><span class="line">          break;</span><br><span class="line">        case error.POSITION_UNAVAILABLE:</span><br><span class="line">          x.innerHTML=&quot;位置信息是不可用的。&quot;</span><br><span class="line">          break;</span><br><span class="line">        case error.TIMEOUT:</span><br><span class="line">          x.innerHTML=&quot;请求用户地理位置超时。&quot;</span><br><span class="line">          break;</span><br><span class="line">        case error.UNKNOWN_ERROR:</span><br><span class="line">          x.innerHTML=&quot;未知错误。&quot;</span><br><span class="line">          break;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  navigator.geolocation ? navigator.geolocation.getCurrentPosition(success,error):(x.innerHTML=&quot;Geolocation is not supported by this browser.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="拖拽API"><a href="#拖拽API" class="headerlink" title="拖拽API"></a>拖拽API</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;拖动红色div到矩形中:&lt;/p&gt;</span><br><span class="line">&lt;!--ondrop监听拖动结束事件--&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot; style=&quot;width:350px;height:70px;padding:10px;border:1px solid #aaaaaa;&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;!--draggable开启可被拖动,ondragstart监听拖拽开始事件--&gt;</span><br><span class="line">&lt;div id=&quot;drag1&quot; style=&quot;background:red;&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot;&gt;</span><br><span class="line">今天吃了大份的猪脚饭啊</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function allowDrop(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drag(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drop(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">var data=ev.dataTransfer.getData(&quot;Text&quot;);</span><br><span class="line">ev.target.appendChild(document.getElementById(data));</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>拖拽API事件</p><table><thead><tr><th>拖动生命周期</th><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>拖动开始</td><td>ondragstart</td><td>在拖动操作开始时执行脚本</td></tr><tr><td>拖动过程中</td><td>ondrag</td><td>只要脚本在被拖动就运行脚本</td></tr><tr><td>拖动过程中</td><td>ondragenter</td><td>当元素被拖动到一个合法的防止目标时，执行脚本</td></tr><tr><td>拖动过程中</td><td>ondragover</td><td>只要元素正在合法的防止目标上拖动时，就执行脚本</td></tr><tr><td>拖动过程中</td><td>ondragleave</td><td>当元素离开合法的防止目标时，就执行脚本</td></tr><tr><td>拖动结束</td><td>ondrop</td><td>将被拖动元素放在目标元素内时运行脚本</td></tr><tr><td>拖动结束</td><td>ondragend</td><td>在拖动操作结束时运行脚本</td></tr></tbody></table><h3 id="WebWorker"><a href="#WebWorker" class="headerlink" title="WebWorker"></a>WebWorker</h3><p>web worker 是运行在后台的非阻塞性质的 JavaScript，不会影响页面的性能，更好的解释是，你可以使用web worker提供的一种简单的方法来为web内容在后台线程中运行脚本，这些线程在执行任务的过程中并不会干扰用户界面，并且这个worker的数量是有上限的一般取决于cpu的内核数量如果是8核cpu，那最多就创建8个最佳，否则也是会影响性能的。<br>主要优势是</p><ul><li><p><strong>并行处理</strong>：可以同时执行多个任务，而不会相互阻塞，特别是在多核CPU上。</p></li><li><p><strong>性能提升</strong>：对于密集型任务，Web Workers可以提高应用程序的整体性能和响应速度。</p></li><li><p><strong>用户体验改善</strong>：主线程（通常是UI线程）不会因为需要执行复杂计算而被阻塞，因此应用程序仍然可以响应用户操作。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//work.js</span><br><span class="line">var i=0; </span><br><span class="line">function timedCount()&#123;  </span><br><span class="line">    i=i+1;  </span><br><span class="line">    postMessage(i); //通过 postMessage发送结果到前端（比如下载进度百分比，上传进度百分比等）</span><br><span class="line">    let time = setTimeout(()=&gt;&#123;</span><br><span class="line">    time = null</span><br><span class="line">    timedCount()</span><br><span class="line">    &#125;,500);  </span><br><span class="line">&#125;  </span><br><span class="line">timedCount();</span><br><span class="line">//使用的时候</span><br><span class="line">let works_a=new Worker(&quot;demo_workers.js&quot;);</span><br><span class="line">let works_b=new Worker(&quot;demo_workers.js&quot;);</span><br><span class="line">works.onmessage = function (event) &#123; </span><br><span class="line">    //接收Worker的回传信息</span><br><span class="line">    console.log(event.data)</span><br><span class="line">&#125;</span><br><span class="line">//停止works</span><br><span class="line">works.terminate();</span><br></pre></td></tr></table></figure><h3 id="WebStorage离线存储"><a href="#WebStorage离线存储" class="headerlink" title="WebStorage离线存储"></a>WebStorage离线存储</h3><p>离线存储允许web应用在用户的设备上本地保存数据，这样即使在没有网络连接的情况下，用户也能加载和使用应用。离线存储的目的是提高应用的性能和可用性，得到更好的用户体验。目前常用的有LocalStorage、SessionStorage和IndexedDB、Cookie</p><h4 id="LocalStorage、SessionStorage、IndexedDB、Cookie的区别"><a href="#LocalStorage、SessionStorage、IndexedDB、Cookie的区别" class="headerlink" title="LocalStorage、SessionStorage、IndexedDB、Cookie的区别"></a>LocalStorage、SessionStorage、IndexedDB、Cookie的区别</h4><ol><li><p><strong>LocalStorage</strong>:</p><ul><li>用于长期存储数据，数据没有过期时间，除非主动删除数据，否则数据永远不会消失。</li><li>存储容量较大，一般在5MB左右。</li><li>只能存储字符串，因此需要将对象JSON序列化。</li></ul></li><li><p><strong>SessionStorage</strong>:</p><ul><li>用于临时存储数据，数据仅在页面会话期间存在，页面关闭则数据消失。</li><li>和 LocalStorage 类似，但它的作用域限于单个页面会话。</li><li>存储容量和 LocalStorage 相似，也主要用于存储字符串数据。</li></ul></li><li><p><strong>IndexedDB</strong>:</p><ul><li>是一个低级API用于客户端存储大量结构化数据，包括文件&#x2F;二进制大对象。</li><li>支持事务，可以存储和操作大量数据。</li><li>存储容量比 LocalStorage 和 SessionStorage 大得多。</li><li>允许你创建索引来高效查询数据。</li></ul></li><li><p><strong>Cookie</strong>:</p><ul><li>按照域名存储，你在哪一个域名下存储的内容, 就在哪一个域名下使用， 其他域名都用不了， 和资源路径地址没有关系。</li><li>存储大小有限制，4KB 左右或者50 条左右。</li><li>时效性，默认是会话级别的时效性(关闭浏览器就没有了)，可以手动设置。</li><li>请求自动携带，当你的 cookie 空间里面有内容的时候，只要是当前域名下的任意一个请求, 都会自动携带 cookie 放在请求头里面， cookie 里面有多少自动携带多少，没有就不会携带了。</li><li>安全性不高，不建议存储敏感数据<br>示例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存设置按钮 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveSettings()&quot;</span>&gt;</span>保存到LocalStorage<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveSessionSettings()&quot;</span>&gt;</span>保存到SessionStorage<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveIndexedDBSettings()&quot;</span>&gt;</span>保存到IndexedDB<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 读取设置按钮 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadSettings()&quot;</span>&gt;</span>从LocalStorage读取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadSessionSettings()&quot;</span>&gt;</span>从SessionStorage读取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadIndexedDBSettings()&quot;</span>&gt;</span>从IndexedDB读取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示设置的区域 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;settings&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// LocalStorage 示例 </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">saveSettings</span>(<span class="params"></span>) &#123; <span class="comment">// 保存设置到LocalStorage  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;favoriteChampion&#x27;</span>, <span class="string">&#x27;炸鸡&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;resolution&#x27;</span>, <span class="string">&#x27;烤串&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置已保存到LocalStorage&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">&#125; </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadSettings</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 从LocalStorage读取设置 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> favoriteChampion = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;favoriteChampion&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> resolution = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;resolution&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;settings&#x27;</span>).<span class="property">innerText</span> = <span class="string">`LocalStorage - 最喜欢的食物是: <span class="subst">$&#123;favoriteChampion&#125;</span>和 <span class="subst">$&#123;resolution&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;从LocalStorage读取设置&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125; </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// SessionStorage 示例 </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">saveSessionSettings</span>(<span class="params"></span>) &#123; <span class="comment">// 保存设置到SessionStorage</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;sessionFavoriteChampion&#x27;</span>, <span class="string">&#x27;薯条&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;sessionResolution&#x27;</span>, <span class="string">&#x27;汉堡&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;会话设置已保存到SessionStorage&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">&#125; </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadSessionSettings</span>(<span class="params"></span>) &#123; <span class="comment">// 从SessionStorage读取设置 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> sessionFavoriteChampion = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;sessionFavoriteChampion&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> sessionResolution = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;sessionResolution&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;settings&#x27;</span>).<span class="property">innerText</span> = <span class="string">`SessionStorage - 最喜欢的食物是: <span class="subst">$&#123;sessionFavoriteChampion&#125;</span>和 <span class="subst">$&#123;sessionResolution&#125;</span>`</span>; </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;从SessionStorage读取设置&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">&#125; </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// IndexedDB 示例 </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> db; </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 打开数据库 </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> request = indexedDB.<span class="title function_">open</span>(<span class="string">&#x27;LoLSettingsDB&#x27;</span>, <span class="number">1</span>); </span></span><br><span class="line"><span class="language-javascript">request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; <span class="comment">// 处理打开数据库时的错误 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开IndexedDB时发生错误。&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;; </span></span><br><span class="line"><span class="language-javascript">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; <span class="comment">// 数据库升级或首次创建时执行</span></span></span><br><span class="line"><span class="language-javascript">    db = event.<span class="property">target</span>.<span class="property">result</span>; </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (!db.<span class="property">objectStoreNames</span>.<span class="title function_">contains</span>(<span class="string">&#x27;settings&#x27;</span>)) &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> objectStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&#x27;settings&#x27;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span> &#125;); </span></span><br><span class="line"><span class="language-javascript">        objectStore.<span class="title function_">createIndex</span>(<span class="string">&#x27;favoriteChampion&#x27;</span>, <span class="string">&#x27;favoriteChampion&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;); </span></span><br><span class="line"><span class="language-javascript">        objectStore.<span class="title function_">createIndex</span>(<span class="string">&#x27;resolution&#x27;</span>, <span class="string">&#x27;resolution&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;); </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;; </span></span><br><span class="line"><span class="language-javascript">request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; <span class="comment">// 成功打开数据库 </span></span></span><br><span class="line"><span class="language-javascript">    db = event.<span class="property">target</span>.<span class="property">result</span>; </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;IndexedDB成功打开&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">&#125;; </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">saveIndexedDBSettings</span>(<span class="params"></span>) &#123; <span class="comment">// 保存设置到IndexedDB </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> transaction = db.<span class="title function_">transaction</span>([<span class="string">&#x27;settings&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;settings&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userSettings = &#123; <span class="attr">id</span>: <span class="string">&#x27;food&#x27;</span>, <span class="attr">favoriteChampion</span>: <span class="string">&#x27;鸡腿&#x27;</span>, <span class="attr">resolution</span>: <span class="string">&#x27;鸭腿&#x27;</span> &#125;; </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> request = objectStore.<span class="title function_">put</span>(userSettings); </span></span><br><span class="line"><span class="language-javascript">    request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;食物设置已保存到IndexedDB&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;; </span></span><br><span class="line"><span class="language-javascript">    request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存设置到IndexedDB时发生错误&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    &#125;; </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadIndexedDBSettings</span>(<span class="params"></span>) &#123; <span class="comment">// 从IndexedDB读取设置 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> transaction = db.<span class="title function_">transaction</span>([<span class="string">&#x27;settings&#x27;</span>]); </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;settings&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> request = objectStore.<span class="title function_">get</span>(<span class="string">&#x27;food&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (request.<span class="property">result</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;settings&#x27;</span>).<span class="property">innerText</span> = <span class="string">`IndexedDB - 最喜欢的食物是: <span class="subst">$&#123;request.result.favoriteChampion&#125;</span>和 <span class="subst">$&#123;request.result.resolution&#125;</span>`</span>; </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;从IndexedDB读取食物设置&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123; </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在IndexedDB中未找到食物设置&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;; </span></span><br><span class="line"><span class="language-javascript">    request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;从IndexedDB读取时发生错误&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;; </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="WebSocket长连接"><a href="#WebSocket长连接" class="headerlink" title="WebSocket长连接"></a>WebSocket长连接</h3><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//web_socket_utils.js</span><br><span class="line"> export const WebSocketTest =(call_back)=&gt;&#123;</span><br><span class="line">    if (&quot;WebSocket&quot; in window)&#123;</span><br><span class="line">       //浏览器支持 WebSocket 打开一个 web socket</span><br><span class="line">       const ws = new WebSocket(&quot;ws://localhost:9998/echo&quot;);</span><br><span class="line">       ws.onopen = function()</span><br><span class="line">       &#123;</span><br><span class="line">          // Web Socket 已连接上，使用 send() 方法发送数据</span><br><span class="line">          ws.send(&quot;发送数据&quot;);</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       ws.onmessage = function (evt) </span><br><span class="line">       &#123; </span><br><span class="line">          call_back(evt.data)</span><br><span class="line">       &#125;;</span><br><span class="line">        ws.error = function (evt) </span><br><span class="line">       &#123; </span><br><span class="line">          call_back(evt.data)</span><br><span class="line">       &#125;;</span><br><span class="line">       ws.onclose = function()</span><br><span class="line">       &#123; </span><br><span class="line">          // 关闭 websocket</span><br><span class="line">       &#125;;</span><br><span class="line">       ws.onopen()</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       // 浏览器不支持 WebSocket</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //使用WebSocketTest的时候</span><br><span class="line"> import &#123;WebSocketTest&#125; from &#x27;./web_socket_utils&#x27;</span><br><span class="line"> let get_server_data = (data)=&gt;&#123;</span><br><span class="line">     //socket返回的数据data</span><br><span class="line"> &#125;</span><br><span class="line">  WebSocketTest(get_server_data)</span><br></pre></td></tr></table></figure><h3 id="HTML5移除的标签"><a href="#HTML5移除的标签" class="headerlink" title="HTML5移除的标签"></a>HTML5移除的标签</h3><p>1.样式标签：不再推荐使用一些样式标签，如<code>&lt;big&gt;</code>、<code>&lt;basefont&gt;</code>、<code>&lt;big&gt;</code>、<code>&lt;center&gt;</code>、<code>&lt;font&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;tt&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;strike&gt;</code>等，应使用CSS来设置样式。</p><p>2.部分浏览器支持的元素:<code>&lt;applet&gt;</code>、<code>&lt;bgsound&gt;</code>、<code>&lt;blink&gt;</code>、<code>&lt;marquee&gt;</code>、<code>&lt;object&gt;</code>：HTML5不再推荐使用<code>&lt;applet&gt;</code>和<code>&lt;object&gt;</code>标签来嵌入Java小程序或其他外部插件，而是鼓励使用<code>&lt;embed&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>等标签。</p><p>3.对可用性产生负面影响:<code>&lt;frameset&gt;</code>、<code>&lt;frame&gt;</code>、<code>&lt;noframes&gt;</code>：html5中不支持frame框架，只支持iframe框架，推荐使用<code>&lt;iframe&gt;</code>或其他技术来实现相同效果。</p><ol start="4"><li>其他标签：</li></ol><ul><li>废除<code>&lt;menu&gt;</code>标签，推荐使用无序列表<code>&lt;ul&gt;</code>替代</li><li>废除<code>&lt;rb&gt;</code>，使用<code>&lt;ruby&gt;</code>替代</li><li>废除<code>&lt;acronym&gt;</code>使用<code>&lt;abbr&gt;</code>替代</li><li>废除<code>&lt;dir&gt;</code>使用<code>&lt;ul&gt;</code>替代</li><li>废除<code>&lt;isindex&gt;</code>使用<code>&lt;form&gt;</code>与<code>&lt;input&gt;</code>相结合的方式替代</li><li>废除<code>&lt;listing&gt;</code>使用<code>&lt;pre&gt;</code>替代</li><li>废除<code>&lt;xmp&gt;</code>使用<code>&lt;code&gt;</code>替代</li><li>废除<code>&lt;nextid&gt;</code>使用<code>&lt;guids&gt;</code>替代</li><li>废除<code>&lt;plaintex&gt;</code>使用“text&#x2F;plian”（无格式正文）MIME类型替代</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>梳理了HTML5的知识点，如果有不对的地方也希望大家指正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在了解HTML5之前，我们先来了解一下什么是HTML和HTML5&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTML的全称为超文本标记语言(H</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/06/13/%E6%80%BB%E7%BB%93vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E4%B8%8Eref%E3%80%81reactive/"/>
    <id>http://example.com/2024/06/13/%E6%80%BB%E7%BB%93vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E4%B8%8Eref%E3%80%81reactive/</id>
    <published>2024-06-13T10:04:34.308Z</published>
    <updated>2024-06-13T10:04:39.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vue2的响应式通过Object.defineProperty将data转为响应式，而vue3则通过Proxy实现，性能得到显著提升，那么vue3的响应式系统做了什么呢？发生了哪些变化？</p><h3 id="vue3通过什么api实现响应式数据声明，怎么实现？"><a href="#vue3通过什么api实现响应式数据声明，怎么实现？" class="headerlink" title="vue3通过什么api实现响应式数据声明，怎么实现？"></a>vue3通过什么api实现响应式数据声明，怎么实现？</h3><p>对比vue2，响应式数据都声明在<code>data()&#123;&#125;</code>中，但是vue3则需要我们通过api自己声明，如下就是声明vue3响应式的代码。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;想吃炸鸡&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;深圳不怕影子斜&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj,msg);</span><br><span class="line">    <span class="keyword">return</span> &#123; msg,obj &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>看完这个案例之后，是不是想了解怎么实现一个简单的响应式数据结构和理解他的原理呢？</p><h4 id="第一步：实现一个简单的reactive"><a href="#第一步：实现一个简单的reactive" class="headerlink" title="第一步：实现一个简单的reactive"></a>第一步：实现一个简单的reactive</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reactive = <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="comment">//返回劫持obj的Proxy对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="comment">//劫持get</span></span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> target[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//劫持set</span></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">            target[key] = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明一个reactive</span></span><br><span class="line"><span class="keyword">let</span> reactive_data = <span class="title function_">reactive</span>(&#123;<span class="attr">age</span>:<span class="number">30</span>&#125;)</span><br><span class="line">a.<span class="property">age</span> = <span class="number">40</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>)</span><br></pre></td></tr></table></figure><p>接下来我们可以看到我们修改了值改成了40，我的reactive方法通过Proxy劫持对象，实现了一个简单的响应式方法，这就是Vue 3 使用了 Proxy 来创建响应式对象的原理，当然vue3考虑的会更全面，我们这只是一个简单的案例，理解他怎么实现的。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8f2aa768d5b475e81d6c6f99f2bba46~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=250&h=166&s=16823&e=jpg&b=fefefe" alt="01.png"></p><h4 id="既然有了reactive-为什么还会有ref呢？"><a href="#既然有了reactive-为什么还会有ref呢？" class="headerlink" title="既然有了reactive,为什么还会有ref呢？"></a>既然有了reactive,为什么还会有ref呢？</h4><p>接下来我们看一段代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title function_">reactive</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印A&#x27;</span>,obj);</span><br><span class="line">  obj++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印B&#x27;</span>,obj);</span><br><span class="line">  <span class="keyword">return</span> &#123; obj &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ba93320344444089f28396b804f0fe0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=850&h=220&s=21235&e=png&b=fef2e5" alt="image.png"><br>再看上面控制台打印的，你会发现通过reactive直接声明number,string,boolean等值类型的响应式数据，是不支持的，直接提示了错误，原因是Proxy只能劫持对象，那我们需要写成下面这样,打印结果正常了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;<span class="attr">value</span>:<span class="number">1</span>&#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印A&#x27;</span>,obj)</span><br><span class="line">  obj.<span class="property">value</span>++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印B&#x27;</span>,obj)</span><br><span class="line">  <span class="keyword">return</span> &#123; obj &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69447c1021144132a976d4c50848f355~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=400&h=78&s=7171&e=png&b=fffefe" alt="image.png"></p><h4 id="第二步-先实现一个简单的ref"><a href="#第二步-先实现一个简单的ref" class="headerlink" title="第二步:先实现一个简单的ref"></a>第二步:先实现一个简单的ref</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> refObject = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">          <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">          value = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> refObject</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明响应式</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="title function_">ref</span>(<span class="number">18</span>)</span><br><span class="line"><span class="comment">//打印出18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ref&#x27;</span>,age.<span class="property">value</span>)</span><br><span class="line"><span class="comment">//赋值加1</span></span><br><span class="line">age.<span class="property">value</span> ++</span><br><span class="line"><span class="comment">//打印出19</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ref&#x27;</span>,age.<span class="property">value</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1d47b6d343e4070bdfb46b58480d845~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=195&h=67&s=1403&e=png&b=ffffff" alt="image.png"></p><p>通过上面这个案例，我们去传入一个对象时，发现又报错了，如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ref = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;小明&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ref&#x27;</span>,refa.<span class="property">value</span>.<span class="property">age</span>);</span><br><span class="line">refa.<span class="property">value</span>.<span class="property">age</span> ++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ref&#x27;</span>,refa.<span class="property">value</span>.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/683d9ec0c37c456d83fede7a4feee1f6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=849&h=241&s=25941&e=png&b=fef5d7" alt="image.png"></p><p>这是因为，真正的ref是通过RefImpl类实现的时候，在构造器和set参数时动态的判断了是否是object对象，如果是则通过reactive实现，那么我们按照他的思路写一个简单的案例，继续改造一下我们的ref</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;age_click()&quot;</span>&gt;</span>点我增加年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//首先简单的实现一下isObject</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">value</span>)=&gt; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//第二步实现toReactive，是否为对象，如果是则调用之前写好的reactive方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">toReactive</span> = (<span class="params">value</span>) =&gt; <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//第三步实现一下RefImpl</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">RefImpl</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    _value =<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//在这里初始化值，真实的RefImpl类构造器里面还初始化了很多东西</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">isObject</span>(value) ? <span class="title function_">toReactive</span>(value) : value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123; <span class="comment">// getter方法 获取value值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get了&#x27;</span>,<span class="variable language_">this</span>.<span class="property">_value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123; <span class="comment">// setter方法 设置value值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">isObject</span>(newVal) ?  <span class="title function_">toReactive</span>(newVal):newVal;  <span class="comment">// 判断是否为object，是则调用toReactive</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set了&#x27;</span>,newVal);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//那么我们的ref就可以简化如下了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> ref =<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> obj = <span class="title function_">ref</span>(&#123;<span class="attr">age</span>:<span class="number">18</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> <span class="title function_">age_click</span> =(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;对象的age&#x27;</span>,obj.<span class="property">value</span>.<span class="property">age</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    obj.<span class="property">value</span>.<span class="property">age</span> ++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;对象的age&#x27;</span>,obj.<span class="property">value</span>.<span class="property">age</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这个时候我们能看到的结果如下，至此，ref实现了可以传入对象进行响应式的操作。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a088cdb3280f42b693fc3dcd246f5e9c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=516&h=177&s=14155&e=png&b=fffefe" alt="image.png"></p><h3 id="实现了数据响应，怎么实现数据变了页面也跟着变？"><a href="#实现了数据响应，怎么实现数据变了页面也跟着变？" class="headerlink" title="实现了数据响应，怎么实现数据变了页面也跟着变？"></a>实现了数据响应，怎么实现数据变了页面也跟着变？</h3><p>我们上面虽然实现了数据的响应，可是他什么时候会更新呢？这个就涉及到vue的track和trigger，我们劫持了数据的get和set，在get的时候track收集依赖（发布订阅），在set的时候触发trigger（通知订阅）的update进行更新。思路有了那我们来写一个简单的案例理解一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;age_click()&quot;</span>&gt;</span>点我增加年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span>我的age现在是<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;update_span&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 首先先将activeWatcher设为null 确保在初始化阶段没有活动的Watcher对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> activeWatcher = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建 Watcher 类，通过构造函数绑定update函数，并实现update更新回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params">updateFn</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">updateFn</span> = updateFn;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 执行更新操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">updateFn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建更新操作方法，更新页面数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> <span class="title function_">update</span> = (<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新页面元素开始&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#update_span&quot;</span>).<span class="property">innerHTML</span> = age.<span class="property">value</span>.<span class="property">age</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新页面元素结束&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//实例化一个Watcher</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">activeWatcher = <span class="keyword">new</span> <span class="title class_">Watcher</span>(update)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建依赖管理类Dep，通过构造函数初始化依赖收集器，实现track收集依赖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 用于存储依赖的订阅者</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">subscribers</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 添加订阅者</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    track=<span class="function">(<span class="params">key</span>) =&gt;</span>  activeWatcher &amp;&amp; <span class="variable language_">this</span>.<span class="property">subscribers</span>.<span class="title function_">add</span>(activeWatcher)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 通知所有订阅者进行更新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    trigger=<span class="function">()=&gt;</span> <span class="variable language_">this</span>.<span class="property">subscribers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">watcher</span>) =&gt;</span> watcher.<span class="title function_">update</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//new 一个依赖收集器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//基于上面的reactive方法，添加了dep.track() //发布订阅和dep.trigger() //通知订阅</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> reactive = <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// track(target, key)//vue的发布订阅</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            dep.<span class="title function_">track</span>() <span class="comment">//发布订阅</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// return Reflect.get(target,key) </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> target[key]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set了&#x27;</span>,value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            target[key] = value</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// vue3底层的对象响应式的雏形是这样的，利用proxy代理，利用reflect反射</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// Reflect.set(target,key,value)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// trigger(target, key)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            dep.<span class="title function_">trigger</span>() <span class="comment">//通知订阅</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//简单的实现isObject</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> <span class="title function_">isObject</span> = (<span class="params">value</span>)=&gt; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 是否为对象，如果是则调用reactive</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">toReactive</span> = (<span class="params">value</span>) =&gt; &#123;<span class="keyword">return</span> <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value&#125;; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//根据上面的RefImpl，添加dep.track()和dep.trigger()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">RefImpl</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    _value =<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//在这里初始化值，真实的RefImpl类构造器里面还初始化了很多东西</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">isObject</span>(value) ? <span class="title function_">toReactive</span>(value) : value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123; <span class="comment">// getter方法 获取value值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        dep.<span class="title function_">track</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get了&#x27;</span>,<span class="variable language_">this</span>.<span class="property">_value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123; <span class="comment">// setter方法 设置value值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">isObject</span>(newVal) ?  <span class="title function_">toReactive</span>(newVal):newVal;  <span class="comment">// 判断是否为object，是则调用toReactive</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set了&#x27;</span>,newVal);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        dep.<span class="title function_">trigger</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//实现ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> ref =<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//声明一个ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> age = <span class="title function_">ref</span>(&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">name</span>:<span class="string">&#x27;aaa&#x27;</span>&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//实现click</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> <span class="title function_">age_click</span> =(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    age.<span class="property">value</span>.<span class="property">age</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//把值初始化挂载在页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">update</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这个时候我们看到了初始化把age挂载在页面上的效果，模拟成功</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6560dad57401416f91c9b469fd8a3e9b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=577&h=543&s=29355&e=png&b=fefefe" alt="image.png"><br>再看看点击一下按钮之后的效果</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5eb3e672c1714b3bb67c34743991746a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=582&h=721&s=44729&e=png&b=fefefe" alt="image.png"><br>至此，模拟成功，这个是一个简单的例子，来帮助我们理解响应式的原理，实际的vue发布订阅以及响应更新页面元素会更复杂。</p><h3 id="ref和reactive的注意事项"><a href="#ref和reactive的注意事项" class="headerlink" title="ref和reactive的注意事项"></a>ref和reactive的注意事项</h3><ul><li>reactive() 返回的是一个原始对象的 Proxy，它和原始对象是不相等的<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raw = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">reactive</span>(raw)</span><br><span class="line"><span class="comment">// 代理对象和原始对象不是全等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy === raw) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li>只有代理对象是响应式的，更改原始对象不会触发更新。因此，使用 Vue 的响应式系统的最佳实践是<strong>仅使用你声明对象的代理版本</strong><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raw = &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;<span class="comment">//非响应式数据</span></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">reactive</span>(raw)<span class="comment">//响应式数据</span></span><br><span class="line">raw.<span class="property">age</span> =<span class="number">19</span>  <span class="comment">//不会触发页面更新</span></span><br><span class="line">proxy.<span class="property">age</span> =<span class="number">19</span> <span class="comment">//会触发页面更新</span></span><br></pre></td></tr></table></figure></li><li>reactive使用时不能替换整个对象：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// 上面的 (&#123; count: 0 &#125;) 引用将不再被追踪</span></span><br><span class="line"><span class="comment">// (响应性连接已丢失！)</span></span><br><span class="line">state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure></li><li>reactive对解构操作不友好：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接，在对象需要解构的时候，建议配合<code>toRefs</code>使用<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;) </span><br><span class="line"><span class="comment">// 当解构时，count 已经与 state.count 断开连接 </span></span><br><span class="line"><span class="keyword">let</span> &#123; count &#125; = state </span><br><span class="line"><span class="comment">// 不会影响原始的 </span></span><br><span class="line">state count++ </span><br><span class="line"><span class="comment">// 该函数接收到的是一个普通的数字 </span></span><br><span class="line"><span class="comment">// 并且无法追踪 state.count 的变化 // 我们必须传入整个对象以保持响应性 callSomeFunction(state.count)</span></span><br><span class="line"><span class="comment">//基于这个问题所以官方建议我们使用ref</span></span><br></pre></td></tr></table></figure></li><li>额外的 ref 解包细节<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) </span><br><span class="line"><span class="comment">//一个 ref 会在作为响应式对象的属性被访问或修改时自动解包,count在reactive中被解包</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; count &#125;)</span><br><span class="line"><span class="comment">//只有当嵌套在一个深层响应式对象内时，才会发生 ref 解包。当其作为shallowReactiv浅层响应式的属性被访问时不会解包</span></span><br><span class="line"><span class="comment">//如果将一个新的 ref 赋值给一个关联了已有 ref 的属性，那么它会替换掉旧的 ref</span></span><br><span class="line"><span class="comment">//当 ref 作为响应式数组或原生集合类型 (如 `Map`) 中的元素被访问时，它不会被解包</span></span><br><span class="line"><span class="comment">//ref在template模板中可以自动解包</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>上次在博客上看说vue3的响应式底层使用到了Reflect工具类，所以我去看了一下，这篇文章写的不错推荐给大家一起看看，这篇文章讲述了Proxy和Reflect,并且描述了通过劫持对象的get或者set方法实现表单校验和请求拦截，扩展了我的编程思路。<br><a href="https://mp.weixin.qq.com/s/9Ve7iidl4V8I_Of3ek2EDQ">揭秘：Proxy 与 Reflect，为何总是形影不离</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>ref判断了对象是原始类型还是object，是object则通过reactive new Proxy后再赋值给value，否则直接赋值给value,ref支持声明number，布尔等原始类型的值和对象的响应式数据</li><li>reactive只支持声明object响应式数据，返回的是一个Proxy代理对象</li><li>通过Weak容器，实现观察者角色，ref和reactive都实现了通过get的track收集依赖到容器和set参数的trigger触发容易中的依赖的更新，下面是vue官方的一段话。</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33bc34be57064e6585425a5bac7953d9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1033&h=324&s=60515&e=png&b=fefefe" alt="image.png"></p><p>最后，如果有写的不好的，欢迎大家指点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;vue2的响应式通过Object.defineProperty将data转为响应式，而vue3则通过Proxy实现，性能得到显著提升，那么v</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/06/13/%E6%80%BB%E7%BB%93JS%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E3%80%81%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E3%80%81%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA%E3%80%81%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2024/06/13/%E6%80%BB%E7%BB%93JS%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E3%80%81%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E3%80%81%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA%E3%80%81%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81%E9%97%AD%E5%8C%85/</id>
    <published>2024-06-13T10:02:47.463Z</published>
    <updated>2024-06-13T10:03:38.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们总是会看到或者听到作用域和作用域链、柯里化、闭包等词语，甚至使用到，趁着现在我总结一下，希望可以帮助大家了解它们，也希望得到大家的指点。</p><h3 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h3><p>作用域是指 js 变量使用时所存在的一个区域，简单来说就是可访问区域。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 输出 1，虽然局部没有 a 变量，但是 全局中有。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 报错，全局中无法使用局部变量。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><h3 id="js有哪些作用域？"><a href="#js有哪些作用域？" class="headerlink" title="js有哪些作用域？"></a>js有哪些作用域？</h3><p>js具体有如下作用域</p><ul><li><strong>Global全局作用域</strong>：在浏览器环境下就是 window，在 node 环境下是 global</li><li><strong>Local函数作用域</strong>：本地作用域，或者叫函数作用域</li><li><strong>Block块级作用域</strong>：es5之前只有函数作用域和全局作用域，es6开始引入了块级作用域</li><li><strong>Script作用域</strong>：let、const 声明的全局变量会保存在 Script 作用域，这些变量可以直接访问，但却不能通过 window.xx 访问，如果需要访问需要把变量挂载在全局作用域上。</li><li><strong>模块作用域</strong>：其实严格来说这也是函数作用域，因为 node 执行它的时候会包一层函数，算是比较特殊的函数作用域，有 module、exports、require 等变量</li><li><strong>Catch Block 作用域</strong>：catch 语句的作用域可以访问错误对象</li><li><strong>With Block 作用域</strong>：with 语句的作用域就是传入的对象的值</li><li><strong>Closure 作用域</strong>：函数返回函数的时候，会把用到的外部变量保存在 Closure 作用域里，这样再执行的时候该有的变量都有，这就是闭包。eval 的闭包比较特殊，会把所有变量都保存到 Closure 作用域</li><li><strong>Eval 作用域</strong>：eval 代码声明的变量会保存在 Eval 作用域</li></ul><h3 id="什么是作用域链？"><a href="#什么是作用域链？" class="headerlink" title="什么是作用域链？"></a>什么是作用域链？</h3><p>在局部作用域使用变量时，如果在自己作用域找不到对应变量，则会往上一级作用域查找，直到全局作用域，如果全局作用域无此变量则会报 undefined。相反，全局作用域中无法使用局部作用域中的变量。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//函数作用域中没有声明a但是往上级作用域中一直找，到window全局作用域中找到了a</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><p>如下add函数中声明了sum  但是add的匿名函数中使用到了sum，这样就形成了闭包，红宝书中说闭包是指有权访问另一个函数作用域中的变量的函数。因为匿名函数中会使用到sum，此时sum会存储到Closure作用域中。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> sum + <span class="number">1</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用闭包的目的――隐藏变量，间接访问一个变量，在定义函数的词法作用域外，调用函数。</li><li>闭包通常在回调函数、私有属性、函数柯里化中使用。</li></ul><h3 id="什么是柯里化？"><a href="#什么是柯里化？" class="headerlink" title="什么是柯里化？"></a>什么是柯里化？</h3><p>函数柯里化就是将一个多参函数转为单参函数，简化函数的传参，但是会增加函数内部的复杂程度。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常计算两数相加的方法 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>)&#123; </span><br><span class="line">    <span class="keyword">return</span> x + y </span><br><span class="line"> &#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">2</span>)) </span><br><span class="line"><span class="comment">// 使用闭包实现柯里化 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x</span>)&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> x + y </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum_t</span>(<span class="params">x</span>)&#123; </span><br><span class="line">    <span class="comment">//可以执行A逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>)&#123; </span><br><span class="line">        <span class="comment">//可以执行B逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">z</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> z+ x + y </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 先声明一个变量拿到自增方法(匿名函数) </span></span><br><span class="line"><span class="keyword">const</span> sum_function = <span class="title function_">sum</span>(<span class="number">1</span>) </span><br><span class="line"><span class="comment">// 在调用这个方法进行自增，输出：3 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum_function</span>(<span class="number">2</span>)) </span><br><span class="line"><span class="comment">// 亦或者直接调用sum方法传入两个参数，输出也是：3 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>))</span><br><span class="line"><span class="comment">//当然如果有更多的参数比如sum_t方法,可以变成如下这种调用方式，但是柯里化层数太多了个人觉得复杂度会提升很大，不是很有必要。</span></span><br><span class="line"><span class="title function_">sum_t</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="什么是变量提升"><a href="#什么是变量提升" class="headerlink" title="什么是变量提升"></a>什么是变量提升</h3><p>变量可以在声明之前使用，值为<code>undefined</code>。这种感觉比较奇怪的现象就是变量提升。</p><p>为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><p>下面代码中，变量<code>foo</code>用<code>var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="什么是暂时性死区"><a href="#什么是暂时性死区" class="headerlink" title="什么是暂时性死区"></a>什么是暂时性死区</h3><p>在变量声明前就使用变量，这种情况会报错，就是暂时性死区，比如下面的代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 暂时性死区开始</span></span><br><span class="line">  name = <span class="string">&#x27;小明&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> name; <span class="comment">// 暂时性死区结束</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">  name = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 大明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   把自己的理解，再加上查阅资料，整合成了这个文档，如果有不对的地方希望大家指正，有些作用域我自己也没关注，趁着这个机会，终于也有了大致的了解，再一次变成了我写博客的动力，只要写了就会有收获，加油。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们总是会看到或者听到作用域和作用域链、柯里化、闭包等词语，甚至使用到，趁着现在我总结一下，希望可以帮助大家了解它们，也希望得到大家的指点。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello 大家好</title>
    <link href="http://example.com/2024/06/03/hello-world/"/>
    <id>http://example.com/2024/06/03/hello-world/</id>
    <published>2024-06-03T14:24:40.109Z</published>
    <updated>2024-06-03T17:57:56.291Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎大家光临木子的博客，在这里希望有能帮到你的地方。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎大家光临木子的博客，在这里希望有能帮到你的地方。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
